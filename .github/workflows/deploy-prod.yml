name: Exchange Watch Backend Deploy (Production)

on:
  push:
    branches: [ main ]
    paths: 
      - '**'
      - '!test/**'
      - '!**/*.spec.ts'
      - '!**/*.test.ts'
      - '!**/*.md'
      - '!.github/**'
      - '!.eslintrc*'
      - '!.prettierrc*'
      - '!jest.config*'
      - '!coverage/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: exchange-watch-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building Docker image..."
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Pushing to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.1.0
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: exchange-watch-backend
        IMAGE_TAG: ${{ github.sha }}
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        timeout: 600s
        envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG
        script: |
          echo "Starting ECR-based rolling deployment..."
          cd ~/exchangeWatch
          
          echo "Login to ECR..."
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
          
          echo "Pulling new image..."
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          echo "Running database migrations..."
          docker run --rm --network exchangewatch_exchange-watch-net --env-file .env $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG sh -c "npx prisma migrate deploy"
          
          echo "Rolling update: scaling to 4 instances..."
          APP_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG docker-compose up -d --scale app=4 app
          sleep 45
          
          echo "Rolling update: scaling back to 3 instances..."
          APP_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG docker-compose up -d --scale app=3 app
          
          echo "Cleaning up old images..."
          docker image prune -f
          
          echo "Deployment completed!"
          docker-compose ps