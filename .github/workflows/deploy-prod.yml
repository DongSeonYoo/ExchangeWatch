name: Exchange Watch Backend Deploy (Production)

on:
  push:
    branches: [ main ]
    paths: 
      - '**'
      - '!test/**'
      - '!**/*.spec.ts'
      - '!**/*.test.ts'
      - '!**/*.md'
      - '!.github/**'
      - '!.eslintrc*'
      - '!.prettierrc*'
      - '!jest.config*'
      - '!coverage/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: exchange-watch-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building Docker image..."
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Pushing to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.1.0
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: exchange-watch-backend
        IMAGE_TAG: ${{ github.sha }}
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        timeout: 600s
        envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG
        script: |
          cd ~/exchangeWatch
          
          echo "Login to ECR..."
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
          
          echo "Pulling new image..."
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          echo "Starting Blue-Green deployment"
          
          # 현재 활성 컬러 확인 default=blue
          CURRENT_COLOR=$(docker-compose ps --services --filter "status=running" | grep -E "^(blue|green)$" | head -1 || echo "blue")
          NEW_COLOR=$([ "$CURRENT_COLOR" = "blue" ] && echo "green" || echo "blue")
          echo "Switch to deployment color: $CURRENT_COLOR → Deploying: $NEW_COLOR"
          
          # Start new color
          echo "Starting $NEW_COLOR"
          if [ "$NEW_COLOR" = "green" ]; then
            GREEN_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG docker-compose up -d --no-deps green
          else
            BLUE_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG docker-compose up -d --no-deps blue
          fi
          
          # Health check new color
          echo "Health checking $NEW_COLOR..."
          sleep 20
          
          # 한 번만 체크 (실패시 배포 중단)
          if ! docker exec exchangewatch-nginx-1 curl -f -s http://$NEW_COLOR:3000/api/health > /dev/null 2>&1; then
            echo "$NEW_COLOR health check failed. Aborting deployment."
            docker-compose stop $NEW_COLOR
            exit 1
          fi
          echo "$NEW_COLOR is healthy, proceeding with traffic switch..."
          
          # Switch traffic (restart nginx)
          echo "Switching traffic to $NEW_COLOR..."
          sed -i "s/server $CURRENT_COLOR:3000/server $NEW_COLOR:3000/g" nginx/nginx.conf
          docker-compose restart nginx
          
          # clear old version + append new version image
          echo "Cleaning up $CURRENT_COLOR and scaling $NEW_COLOR..."
          docker-compose stop $CURRENT_COLOR
          
          if [ "$NEW_COLOR" = "green" ]; then
            GREEN_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG docker-compose up -d --scale green=${CURRENT_SCALE:-3} --no-recreate
          else
            BLUE_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG docker-compose up -d --scale blue=${CURRENT_SCALE:-3} --no-recreate
          fi
          
          echo "Blue-Green deployment completed successfully!"
          
          echo "Cleaning up old images..."
          docker image prune -f
          
          echo "Deployment completed!"
          